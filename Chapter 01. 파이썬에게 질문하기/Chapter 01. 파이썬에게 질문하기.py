Python 3.8.1 (tags/v3.8.1:1b293b6, Dec 18 2019, 22:39:24) [MSC v.1916 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license()" for more information.
>>> 33 + 55
88
>>> 7 * 5 / 2
17.5
>>> 9 * (5-7) / 3
-6.0
>>> 33 + 55 =
SyntaxError: invalid syntax
>>> Hello, world!
SyntaxError: invalid syntax
>>> print("Hello, World!")
Hello, World!
>>> printf(5)
Traceback (most recent call last):
  File "<pyshell#6>", line 1, in <module>
    printf(5)
NameError: name 'printf' is not defined
>>> print(5)
5
>>> print(3 + 5)
8
>>> pirnt("3 + 5")
Traceback (most recent call last):
  File "<pyshell#9>", line 1, in <module>
    pirnt("3 + 5")
NameError: name 'pirnt' is not defined
>>> print("3+5")
3+5
>>> print("3 + 5 =", 8)
3 + 5 = 8
>>> print(1, 2, 3, "Hello", "world!")
1 2 3 Hello world!
>>> print("3 + 5 =", 3 + 5)
3 + 5 = 8
>>> 
>>> print("홍길동")
홍길동
>>> print(1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10)
55
>>> print(2 * 5)
10
>>> print("5 - (3 - 1) = ", 5 - (3 - 1))
5 - (3 - 1) =  3
>>> print("5 - (3 - 1) =", 5 - (3 - 1))
5 - (3 - 1) = 3
>>> print(10 / 2, 10 * 2)
5.0 20
>>> 10 / 2
5.0
>>> # IDLE를 가리켜 '파이썬 인터프리터 프롬포트' 또는 간단히 '파이썬 프롬포트'라 하는데, 이는 우리가 시키는 일을 수행하는 '램프의 지니' 정도로 생각하면 된다.
>>> # 특히 얘는 산술을 정말 잘한다. 계산을 시키면 그 결과를 바로 보여준다.
>>> # 조금 친절하게 물어본다고 다음과 같이 =까지 넣어주면 안 된다. 그러면 '오류(Error)'라는 것이 발생한다. 물어보는 방식에도 규칙이 존재한다. 그리고 그러한 규칙을 하나씩 알아가는 것이 파이썬을 공부하는 과정이다.
>>> # print()의 소괄호 사이에 "Hello world!"를 넣어서 명령을 내렸더니, 넣은 문장을 그대로 출력해주었다. 이렇듯 '지니'가 출력을 하도록(소리를 지르도록) 하려면 print()의 소괄호 사이에 '큰따옴표로 감싼 문장'을 넣어주면 된다.
>>> # 만약에 단순히 '수(number)'를 출력하고 싶다면 굳이 큰따옴표를 붙이지 않아도 된다.
>>> # 콤라를 찍어서 출력하고 싶은 것들을 추가로 나열할 수 있다.
>>> # 어느새 우리는 수식을 계산하게 하고 또 적절히 그 결과를 출력하도록 명령을 내릴 수 있게 되었다. 그리고 지금 설명한 내용은 하나의 현상으로 받아들이자. 예를 들어서 다음과 같은 질문은 지금 어울리지 않는다.
>>> # (그냥 파이썬 프롬포트가 그렇게 동작하도록 만들어져 있다고 가볍게 생각하자.)
>>> # "print()의 소괄호 안에 콤마를 찍으면 왜 여러 가지가 출력이 되나요?"
>>> 이어서 연습문제가 등장하는데, 가급적이면 이렇듯 중간에 등장하는 연습문제를 풀고 넘어가기 바란다. 시간이 조금 걸려도 그렇게 해야 다음 진도 나가기가 수월하다.
SyntaxError: invalid syntax
>>> # 이어서 연습문제가 등장하는데, 가급적이면 이렇듯 중간에 등장하는 연습문제를 풀고 넘어가기 바란다. 시간이 조금 걸려도 그렇게 해야 다음 진도 나가기가 수월하다.
>>> 
>>> # 01 - 6 이거 기억해 둬 조금 이따가 다시 사용할 거야
>>> val = 30
>>> # 파이썬의 =은 '대입(assignment)'이라 하여 수학기호 =와 의미가 다르다. 그러니까 위의 명령을 내리면 컴퓨터 내부에서는 다음과 같은 일이 일어난다.
>>> # "메모리 공간에 30을 저장하고, 그 공간에다 val이라는 이름을 붙인다."
>>> # 따라서 이후로는 val이라는 이름은 30을 의미하게 된다. 이와 관련하여 다음 예제를 실행해 보자. 그러면 느낌이 단번에 온다.
>>> v1 = 25
>>> v2 = 30
>>> print(v1 + v2)
55
>>> x = 3 * 50
>>> y = x + 120
>>> z = y / 3
>>> print(z)
90.0
>>> # 그럼 위의 내용에 대해 한 문장씩 설명해보겠다. 일단 위에서 다음 문장이 제일 먼저 실행된다. x = 3 * 50
>>> # 이때 =보다 *이 먼저 실행된다. 즉 곱셈이 진행되고 그 결과인 150이 메모리 공간에 저장된 후에 =에 의해서 그 공간에 x라는 이름이 붙게 된다.
>>> # 마찬가지로 다음 문장이 이어서 실행되면, y = x + 12
>>> # 마찬가지로 다음 문장이 이어서 실행되면, y = x + 120
>>> # 먼저 +가 진행되어 그 결과값인 270이 메모리 공간에 저장되고, 이어서 = 에 의해 그 공간에 y라는 이름이 붙게 된다.
>>> # 그리고 다음 문장이 이어서 실행되면, z = y / 3
>>> # 먼저 /이 진행되어 그 결과인 90이 메모리 공간에 저장되고, 이어서 =에 의해 그 공간에 z라는 이름이 붙게 되어 다음의 상태가 된다.
>>> # x = 150, y = 270, z = 90
>>> # 그래서 마지막에 z를 출력했을 때 90이 출력되었다.
>>> 
>>> # [연습문제 01-2]
>>> # 질문1. 정수 2를 세 번 곱하면 얼마인가?
>>> num = 2 * 3
>>> print(num)
6
>>> # 질문2. 그리고 그 결과를 4로 나누면 얼마인가?
>>> num = num / 4
>>> print(num)
1.5
>>> # 질문3. 끝으로 그 결과를 두 번 곱하면 얼마인가?
>>> num = num * 2
>>> print(num)
3.0
>>> # 질문 1. 정수 2를 세 번 곱하면 얼마인가?
>>> num = 2 * 2 * 2
>>> print(num)
8
>>> # 질문 2. 그리고 그 결과를 4로 나누면 얼마인가?
>>> num = num / 4
>>> print(num)
2.0
>>> # 질문 3. 끝으로 그 결과를 두 번 곱하면 얼마인가?
>>> num = 2.0 * 2.0
>>> print(num)
4.0
>>> 
>>> # 01-7 이름 가져다 붙이기
>>> # 파이썬의 =이 하는 일은 '메모리 공간에 이름 붙이기'로 정리할 수 있다.
>>> x = 50
>>> # 여기서 x와 같이 메모리 공간에 붙여진 이름을 '변수(variable)'라 한다. 그리고 이렇듯 메모리 공간에 붙여진 이름 '변수'는 그 이름을 떼다가 다른 공간에 붙일 수도 있다.
>>> x = 100
>>> print(x)
100
>>> x = 3.14
>>> print(x)
3.14
>>> x = "Hi~"
>>> print(x)
Hi~
>>> # 위의 예에서는 다음의 실행을 통해 100을 메모리 공간에 저장하고, 그 공간에 x라는 이름을 처음 붙였다. x = 100
>>> # 그런데 이어서 다음 문장의 실행을 통해 3.14를 메모리 공간에 저장하고, 100이 저장된 공간에서 이름 x를 떼다가 3.14가 저장된 공간에 대신 붙였다. x = 3.14
>>> # 마지막으로 다음 문장이 실행되면서 "Hi~"라는 문장이 메모리 공간에 저장되고, 이름 x를 이 공간에 옮겨 붙였다. x = "Hi~"
>>> # 정리하면, x라는 이름표의 위치가 다음과 같이 이동한 것이다.
>>> # x = 100 → x = 3.14 → x = "Hi~"
>>> # 그리고 위에서 보이듯이 큰따옴표로 묶어서 표현된 문장 "Hi~"를 가리켜 '문자열'이라 하는데, 문자열을 이루는 문자들은 메모리 공간에 나란히 저장되어 하나의 데이터로 존재하게 된다.
>>> # "문자열을 이루는 문자들은 메모리 공간에 나란히 저장되어 하나의 데이터로 존재한다."
>>> # 전 예제들을 다음과 같이 바꿀 수 있다.
>>> x = 3 * 50
>>> x = x + 120
>>> x = x / 3
>>> print(x)
90.0
>>> # 위 예제의 실행 흐름을 설명하면 이렇다. 먼저 다음 문장이 실행되면서 메모리에 150이 저장되고, 그 메모리 공간에 x라는 이름이 붙는다. x = 3 * 50
>>> # 이어서 다음 문장이 실행되면서, x와 120의 덧셈 결과인 270이 메모리 공간에 저장되고, 좀 전에 150이 저장된 공간에 붙여 두었던 이름 x를 떼다가 여기 270이 저장된 공간에 붙이게 된다. x = x + 120
>>> # 이어서 실행하는 다음 문장도 마찬가지이다. 나눗셈이 먼저 진행되어 그 결과가 메모리 공간에 저장되고, 그 메모리 공간에 이름 x가 붙게 된다. x = x / 3
>>> # 이렇듯 한 문장 안에 동일한 변수의 이름은 두 번 이상 등장할 수 있다.
>>> 
>>> # [연습문제 01-3]
>>> # 변수는 딱 하나만 사용
>>> >>> # 질문 1. 정수 2를 세 번 곱하면 얼마인가?
>>> num = 2 * 2 * 2
>>> print(num)
SyntaxError: invalid syntax
>>> # 질문 1. 정수 2를 세 번 곱하면 얼마인가?
>>> num = 2 * 2 * 2
>>> print(num)
SyntaxError: invalid syntax
>>> # 질문 1. 정수 2를 세 번 곱하면 얼마인가?
>>> num = 2 * 2 * 2
>>> print(num)
8
>>> # 질문 2. 그리고 그 결과를 4로 나누면 얼마인가?
>>> num = num / 4
>>> print(num)
2.0
>>> # 질문 3. 끝으로 그 결과를 두 번 곱하면 얼마인가?
>>> num = num * 2
>>> print(num)
4.0
>>> # 연습문제 01-2에서 다음과 같이 변수를 나누어서 해결했어야 하나보다.
>>> x = 2 * 2 * 2
>>> print(x)
8
>>> y = x / 4
>>> print(y)
2.0
>>> z = y * 2
>>> print(z)
4.0
>>> 
>>> # 01-8 변수(variable)와 대입 연산자
>>> # '이름을 가져다 붙인다.'는 표현을 책 마지막까지 쓴다면 설명하는 필자도, 그리고 그 설명을 듣는 여러분에게도 피곤한 일이 될 수 있다.
>>> # 다음 문장에서 실제 일어나는 일이 25가 저장된 공간에 v라는 이름을 가져다 붙이는 것이 확실하지만 말이다.
>>> v = 25
>>> # 일반적으로 프로그래밍 언어들은 메모리 공간과 그 공간에 붙여진 이름을 동일시한다.
>>> # "메모리 공간과 그 공간에 붙여진 이름을 동일시한다."
>>> # 따라서 다음 두 문장을 보면서,
>>> v = 25
>>> v = 30
>>> # 이를 다음과 같이 표현하는 것이 좋다. 이것이 변수에 대한 논리적인 이해가 되기 때문이다. (이름표 떼다 붙이기는 변수에 대한 메모리 관점의 물리적인 이해이다.)
>>> # "먼저 변수 v에 25를 저장하였다."
>>> # "그리고 다음 문장에서 v에 저장된 값을 30으로 바꾸었다."
>>> # 즉 변수 자체를 값의 저장이 가능한 메모리 공간으로 생각하는 것이다. (단, 실제로 일어나는 일이 이름 가져다 붙이기라는 사실도 기억하고 있어야 한다.)
>>> # 그리고 변수에 값을 저장할 때 사용하는 =을 가리켜 '대입 연산자'라 하는데, 이 연산자가 하는 일은 다음과 같이 정리해 두자.
>>> # "=의 오른편에 있는 값을 =의 왼편에 있는 변수에 저장한다."
>>> # 그러니까 변수에는 얼마든지 다른 값을 저장할 수 있다. 연산자 =을 이용해서 말이다.
>>> 
>>> # 01-9 이거 어떤 일들이 벌어질까요?
>>> # 이제 몇몇 문장들을 보여줄 테니 그것이 의미하는 바가 무엇인지 짐작해보자. 먼저 다음 문장이 의미하는 바를 짐작해보자.
>>> x, y = 121, 787
>>> x, y = 121, 797
>>> # 이는 다음의 예에서 보이듯이 변수 x와 y를 선언하고(만들고), 각각에 121과 797을 저장하라는 의미이다.
>>> x, y = 121, 797
>>> print(x, y)
121 797
>>> # 그럼 다음 문장이 의미하는 바는 무엇이겠는가?
>>> x = y
>>> # 다음 예에서 보이듯이 y가 갖고 있는 값을 x에 저장하라는 의미이다.
>>> x, y = 121, 797
>>> x = y
>>> print(x, y)
797 797
>>> # 그렇다면 다음 문장이 갖는 의미는 무엇이겠는가?
>>> x, y = y, x
>>> # 다음 예제에서 보이듯이 두 값의 교환이다.
>>> x, y = 121, 797
>>> x, y = y, x
>>> print(x, y)
797 121
>>> # 다른 언어와 비교해 볼 때, 두 변수에 저장된 값을 서로 바꾸는 일이 이렇게 쉽게 된다는 사실은 놀라운 일이다. 하지만 파이썬 입장에서 이는 매우 당연한 일이다.
>>> 