Python 3.8.1 (tags/v3.8.1:1b293b6, Dec 18 2019, 22:39:24) [MSC v.1916 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license()" for more information.
>>> # 03-3 강력한 그러나 위험할 수 있는 eval 함수
>>> 
>>> # 일단 eval 함수에 대한 설명은 끝이 났다. 그런데 이런 말을 하고 싶다.
>>> 
>>> # "다음 장에서 eval 함수를 대신할 수 있는 함수를 소개해 줄게요."
>>> 
>>> # "그때까지만 eval 함수를 사용하기로 합시다."
>>> 
>>> # 사실 eval 함수는 대단한 함수다. 함수 호출 시 전달되는 문자열의 내용을 분석해서 그 내용에 따라
>>> # 무엇을 할지 결정하고 행동하기 때문이다. 그러니까 그냥 문자열을 숫자로 바꿔주는 기능의 함수가
>>> # 아니다. 그 이상의 기능을 갖고 있는데 그냥 우리가 그정도 수준으로만 사용하는 것이다.
>>> 
>>> result = eval(input("뭐든 넣어요 : "))
뭐든 넣어요 : 2 - 4 * 5 + 3
>>> print(result)
-15
>>> 
>>> # 위의 예에서 eval 함수에 문자열 "2 - 4 * 5 +3"이 전달되었다. 그랬더니 문자열 안에 담겨 있는 수식을
>>> # 다 계산하고 그 결과만 반환했다. 누가? eval 함수가! 사실 eval은 evaluate의 앞 부분을 딴 것인데,
>>> # 그 이름처럼 전달된 문자열의 내용을 평가 및 해석해서 무엇을 할지 결정한다.
>>> 
>>> # 그렇다면 이 함수를 왜 쓰지 말라고 하는 것일까? 강력하니까 마구 써 줘야 하는 것 아닐까?
>>> # 강력한데 조금 위험할 수 있다. 누군가 eval 함수를 호출한 문장을 이용해서,
>>> # 시키지 않은 일이 내 컴퓨터에서 실행되게끔 할 수 있기 때문이다.
>>> # 즉 eval 함수를 쓰면 보안에 취약해진다.
>>> 
>>> def ret():	# ret라는 이름의 함수 정의, 단순히 12를 반환하는 함수다.
	return 12

>>> result = eval(input("뭐든 넣어요 : "))
뭐든 넣어요 : ret()
>>> print(result)
12
>>> 
>>> # 위의 예에서는 그냥 12를 반환하는 엄청 단순한 함수 ret을 정의했다. 그리고 어디서도 이 함수를 호출하지 않았다.
>>> # 그런데도 불구하고 이 함수가 호출되었다. 이유는 프로그램 사용자가 키보드로 다음과 같이 입력했기 때문이다.
>>> 
>>> # result = eval(input("뭐든 넣어요 : "))
>>> # 뭐든 넣어요 : ret()
>>> 
>>> # 위의 입력으로 인해 eval 함수에는 문자열 "ret()"이 전달되었고, eval 함수는 이 내용을 분석해서 ret 함수를 호출하였다.
>>> # (프로그래머가 ret 함수 호출을 명령하지 않았음에도 불구하고 ret 함수가 호출되었는데, 이는 보안의 취약점으로 여겨지는 부분이다.)
>>> 
>>> # 자! 위의 예를 통해서, 코드 조작이 아닌 단순 문자열 조작만으로도 우리가 시키지 않은 일을 하도록 할 수 있다는 것을
>>> # 짐작해볼 수 있지 않은가? 우리가 eval 함수를 사용한다면 말이다. 그래서 eval 함수의 호출은 가급적 제한해야 한다.
>>> 