Python 3.8.1 (tags/v3.8.1:1b293b6, Dec 18 2019, 22:39:24) [MSC v.1916 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license()" for more information.
>>> # 05-5 슬라이싱 연산에서 생략 가능한 부분
>>> 
>>> # 슬라이싱 연산에서 리스트의 '시작' 또는 '끝'의 인덱스 값을 넣어야 한느 경우 이에 대한 정보는 생략할 수 있다.
>>> # 예를 들어서 다음과 같이 리스트의 첫 번째 위치의 값부터 교체를 진행할 경우,
>>> 
>>> st = [1, 2,3 , 4, 5]
>>> st[0 : 3] = [0, 0, 0]	# 리스트의 첫 번째 위치의 값부터 교체에 들어간다.
>>> st
[0, 0, 0, 4, 5]
>>> 
>>> # 다음과 같이 첫 번째 위치의 인덱스 값인 0을 생략해서 쓸 수 있다.
>>> 
>>> st = [1, 2, 3, 4, 5]
>>> st[: 3] = [0, 0, 0]	# 리스트의 첫 번째 위치의 값을 의미하는 0 생략!
>>> st
[0, 0, 0, 4, 5]
>>> 
>>> # 그리고 마지막 위치의 값까지 교체할 경우 마지막에 해당하는 인덱스 값도 생략할 수 있다.
>>> 
>>> st = [1, 2, 3, 4, 5]
>>> st[2 :] = [0, 0, 0]	# 인덱스 값 2의 위치부터 마지막까지 [0, 0, 0]으로 교체
>>> st
[1, 2, 0, 0, 0]
>>> 
>>> # 따라서 리스트 전체를 교체하는 경우 다음과 같이 둘 다 생략하는 것도 가능하다.
>>> 
>>> st = [1, 2, 3, 4, 5]
>>> st[ : ] = [0, 0, 0, 0, 0]		# 리스트 전체를 [0, 0, 0, 0, 0]으로 교체
>>> st
[0, 0, 0, 0, 0]
>>> 
>>> # 그리고 앞서 슬라이싱 연산을 이용한 리스트의 부분 교체에서 교체할 값의 수는 일치하지 않아도 됨을 확인하였다.
>>> # 즉 다음과 같이 리스트 전체를 0 하나로 교체하는 것도 가능하다.
>>> 
>>> st = [1, 2, 3, 4, 5]
>>> st[ : ] = [0]		# 리스트 전체를 0 하나로 교체
>>> st
[0]
>>> 
>>> # 그리고 다음과 같이 텅 빈 리스트도 만들 수도 있는데,
>>> 
>>> st = []	# 텅 빈 리스트 생성
>>> st
[]
>>> 
>>> # 이러한 빈 리스트를 통해서 다음과 같이 리스트 전체의 내용을 지워버릴 수도 있다.
>>> 
>>> st = [1, 2, 3, 4, 5]
>>> st[ : ] = []	# 리스트 전체 내용 삭제
>>> st
[]
>>> 
>>> # 리스트에 담겨 있는 내용을 빈 리스트로 대체했으니 결과적으로 리스트에 저장된 내용은 전부 지워져버린다.
>>> 