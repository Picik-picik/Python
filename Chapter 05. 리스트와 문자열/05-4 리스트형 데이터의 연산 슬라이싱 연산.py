Python 3.8.1 (tags/v3.8.1:1b293b6, Dec 18 2019, 22:39:24) [MSC v.1916 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license()" for more information.
>>> # 05-4 리스트형 데이터의 연산 : 슬라이싱 연산
>>> 
>>> # 리스트를 대상으로 하는 다음 '슬라이싱 연산'도 앞서 설명한 '인덱싱 연산'과 상당 부분 유사하다.
>>> 
>>> #	[ : ]	슬라이싱(slicing) 연산
>>> 
>>> # 인덱싱 연산이 리스트에 속한 값들 중 딱 하나만을 대상으로 하는 연산이라면, 슬라이싱 연산은 리스트에 속한 값들 중
>>> # 하나 이상의 값을 묶어서 이들을 대상으로 하는 연산이다. 그럼 이와 관련해서 다음 예를 보자.
>>> 
>>> st1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> st2 = st[2 : 5]	# st1[2 : 5]를 꺼내 st2에 저장
Traceback (most recent call last):
  File "<pyshell#10>", line 1, in <module>
    st2 = st[2 : 5]	# st1[2 : 5]를 꺼내 st2에 저장
NameError: name 'st' is not defined
>>> st2 = st1[2 : 5]	# st1[2 : 5]를 꺼내 st2에 저장
>>> st2
[3, 4, 5]
>>> 
>>> # 위 예의 다음 문장이 의미하는 바는,
>>> 
>>> #	st2 = st[2 : 5]	# st1[2] ~ st1[4]까지 꺼내서 st2에 저장
>>> 
>>> # 다음과 같다.
>>> 
>>> #	"st1[2]부터 st1[4]까지의 값을 꺼내서 st1에 리스트 형태로 저장해라."
>>> 
>>> # 위의 예에서 주의할 부분은 st1[2] ~ st1[4]의 값을 꺼냈다는 사실이다. 즉 st1[2 : 5]를 다음과 같이 해석해야 한다.
>>> 
>>> #	st1[2]의 값부터 st1[5] 바로 앞의 값까지…
>>> 
>>> # 그리고 인덱싱 연산과 마찬가지로 슬라이싱 연산도 '값의 꺼냄'뿐 아니라 '값의 수정'에도 사용할 수 있다.
>>> # 예를 들어서 다음의 리스트가 존재한다고 가정해보자.
>>> 
>>> #	st = [1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> 
>>> # 위의 리스트에서 중간 부분에 위치한 3, 4, 5를 빼고 대신에 0을 다섯 개 넣고자 한다면 다음과 같이 하면 된다.
>>> 
>>> st = [1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> st[2 : 5] = [0, 0, 0, 0, 0]	# st[2 : 5]의 위치에 [0, 0, 0, 0, 0] 넣기
>>> st
[1, 2, 0, 0, 0, 0, 0, 6, 7, 8, 9]
>>> 
>>> # 이렇듯 슬라이싱 연산의 '값의 수정'은 '부분 교체'로 볼 수 있다. 그리고 위에서 보였듯이 부분 교체를 할 때 값의 개수가 같을 필요는 없다.
>>> # 더 많아도 되고 더 적어도 된다.
>>> 
>>> 