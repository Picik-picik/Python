Python 3.8.1 (tags/v3.8.1:1b293b6, Dec 18 2019, 22:39:24) [MSC v.1916 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license()" for more information.
>>> # 06-6 함수가 아닌 del 명령
>>> 
>>> # 리스트와 문자열 관련 설명은 끝이 났는데, 마지막으로 리스트의 삭제와 관련해서 조금만 더 설명을 하고자 한다.
>>> # 문자열은 수정 자체가 불가능하므로 이는 어디까지나 리스트와 관련 있는 이야기이다.
>>> 
>>> # 재미있게도 파이썬은 다양한 삭제 방법을 제공하고 있다. 앞서 배운 clear 함수 호출을 통해서 다음과 같이 리스트의 모든 값을 삭제할 수도 있지만,
>>> 
>>> st = [1, 2, 3, 4, 5]
>>> st.clear()	# 리스트의 모든 값 삭제
>>> st
[]
>>> 
>>> # 다음과 같이 슬라이싱 연산을 기반으로도 리스트의 모든 값을 삭제할 수 있다.
>>> 
>>> st = [1, 2, 3, 4, 5]
>>> st[ : ] = []
>>> st
[]
>>> 
>>> # 사실 슬라이싱 연산을 하면 다음과 같이 부분적인 삭제도 가능하기 때문에 이 방식도 많이 사용하는 편이다.
>>> 
>>> st = [1, 2, 3, 4, 5]
>>> st[2 : ] = []		# 인덱스 2 이후로 전부 삭제
>>> st
[1, 2]
>>> 
>>> # 그런데 파이썬은 del 명령도 제공하고 있어서, 이를 통해 다음과 같이 삭제를 진행할 수도 있다.
>>> 
>>> st = [1, 2, 3, 4, 5]
>>> del st[ : ]	# 리스트에 저장된 값 모두 삭제
>>> st
[]
>>> 
>>> 물론 다음과 같이 부분적으로 삭제하는 것도 된다.
SyntaxError: invalid syntax
>>> # 물론 다음과 같이 부분적으로 삭제하는 것도 된다.
>>> 
>>> st = [1, 2, 3, 4, 5]
>>> del [3 : ]	# st[3]부터 그 뒤까지 모두 삭제
SyntaxError: invalid syntax
>>> del st[3 : ]	# st[3]부터 그 뒤까지 모두 삭제
>>> del st[0]	# st[0] 하나만 삭제
>>> st
[2, 3]
>>> 
>>> # 다만 리스트 안에 저장된 값 모두를 삭제할 생각으로 다음과 같이 del 연산을 하는 실수를 범하지는 말자.
>>> # 이는 리스트에 저장된 값을 삭제하는 것이 아니라 리스트 자체를 소멸시키는 일이기 때문이다.
>>> 
>>> st = [1, 2, 3, 4, 5]
>>> del st 	# 리스트 통째로 삭제! 리스트 자체를 삭제!
>>> ㄴㅅ
Traceback (most recent call last):
  File "<pyshell#43>", line 1, in <module>
    ㄴㅅ
NameError: name 'ᄂᄉ' is not defined
>>> st
Traceback (most recent call last):
  File "<pyshell#44>", line 1, in <module>
    st
NameError: name 'st' is not defined
>>> 